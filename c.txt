In C, memory allocation can be done in two ways:
1. Static Memory Allocation:

• Occurs at compile time.
• Memory is allocated on the stack.
• Size of memory is fixed and cannot be changed during program execution.
• Used for variables declared outside functions (global variables) and variables declared with the static keyword.

int x; // Global variable (static allocation)

void func() {
    static int y; // Static local variable (static allocation)
    int z; // Automatic local variable (stack allocation)
}

2. Dynamic Memory Allocation:

• Occurs at runtime.
• Memory is allocated on the heap.
• Size of memory can be determined and changed during program execution.
• Uses functions from stdlib.h library:
	• malloc(): Allocates a block of memory of specified size.
	• calloc(): Allocates a block of memory for an array of elements, initializing them to zero.
	• realloc(): Resizes an existing block of memory.
	• free(): Deallocates the memory allocated by malloc(), calloc(), or realloc().



Example:
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *ptr;
    int n, i;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Allocate memory for n integers
    ptr = (int*)malloc(n * sizeof(int));

    if (ptr == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    // Use the allocated memory
    for (i = 0; i < n; i++) {
        ptr[i] = i + 1;
    }

    // Print the elements
    for (i = 0; i < n; i++) {
        printf("%d ", ptr[i]);
    }
    printf("\n");

    // Deallocate memory
    free(ptr);

    return 0;
}


Generative AI is experimental.

[1]: https://www.google.com/search?q=memory+allocation+in+c

