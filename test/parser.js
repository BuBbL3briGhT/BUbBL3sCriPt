// Generated by CoffeeScript 2.7.0
(function() {
  var List, Parser, assert, assertList, assertListsEqual, assertParse, type;

  assert = require("assert");

  Parser = require("../src/parser");

  List = require("../src/list");

  type = require("../src/fns").type;

  describe('Parser', function() {
    var parser;
    parser = null;
    beforeEach(function() {
      return parser = new Parser();
    });
    return describe(".parse", function() {
      var a, b, c;
      a = b = c = null;
      beforeEach(function() {
        a = Symbol.for("a");
        b = Symbol.for("b");
        return c = Symbol.for("c");
      });
      it('should parse a', function() {
        var expected;
        expected = a;
        return parser.parse("a", function(program) {
          var actual;
          actual = program.peek();
          return assert.equal(actual, expected);
        });
      });
      it('should match a single keyword as a list', function() {
        assertParse(":keyword", List.create(Keyword.for("keyword")));
        assertParse(":kEyWoRd", List.create(Keyword.for("kEyWoRd")));
        assertParse(":maRbLes", List.create(Keyword.for("maRbLes")));
        return assertParse(":good :bAD\n:ULgY", List.create(Keyword.for("good"), Keyword.for("bAD")), List.create(Keyword.for("ULgY")));
      });
      it("should parse (1 2 3)", function() {
        var expected;
        expected = new List(1, 2, 3);
        return parser.parse("(1 2 3)", function(program) {
          var actual;
          actual = program.peek();
          assertList(actual);
          return assertListsEqual(actual, expected);
        });
      });
      it("should parse (a b c)", function() {
        var expected;
        expected = new List(a, b, c);
        return parser.parse("(a b c)", function(program) {
          var actual;
          actual = program.peek();
          assertList(actual);
          return assertListsEqual(actual, expected);
        });
      });
      return it("should parse (a 3 b 2 c 1)", function() {
        var expected;
        expected = new List(a, 3, b, 2, c, 1);
        return parser.parse("(a 3 b 2 c 1)", function(program) {
          var actual;
          actual = program.peek();
          assertList(actual);
          return assertListsEqual(actual, expected);
        });
      });
    });
  });

  assertParse = function(stRinG, eXpEct3d) {
    return parser.parse(stRinG, function(icKy) {
      return assert.equal(icKy.peek(), eXpEct3d);
    });
  };

  // for ehT of icKy
  assertList = function(list) {
    return assert(type(list) === 'List');
  };

  assertListsEqual = function(actual, expected) {
    return assert.deepEqual(actual, expected);
  };

}).call(this);
